myStrumModel <- createStrumModel(
formulas = myStrumModel,
defaultError = '<p,e>',
fixLoadingToOne = FALSE
)
myStrumData <- strum_data(data, type = "Pedigree", twin = "zyg")
strum_result <- strum(myStrumModel, myStrumData)
var_list <- cv_individual(list(list(data = myStrumData, model = myStrumModel)))
var_poly <- var_list[[1]]$V[[1]]
var_env <- var_list[[1]]$V[[2]]
cov2cor(var_poly)
cov2cor(var_env)
var_poly
var_env
View(data)
data <- asu_60_50_25
View(data)
data <- asu_50_50_50
View(data)
data <- asu_60_50_25
myStrumModel <- "factor1 =~ v1 + v2 + v3 + v4 + v5\nvar(factor1,e) = 1"
myStrumModel <- createStrumModel(
formulas = myStrumModel,
defaultError = '<p,e>',
fixLoadingToOne = FALSE
)
myStrumData <- strum_data(data, type = "Pedigree", twin = "zyg")
strum_result <- strum(myStrumModel, myStrumData)
var_list <- cv_individual(list(list(data = myStrumData, model = myStrumModel)))
var_poly <- var_list[[1]]$V[[1]]
var_env <- var_list[[1]]$V[[2]]
cov2cor(var_poly)
cov2cor(var_env)
View(data)
data <- asu_60_50_25
View(data)
var_env
var_poly
strum_result
myStrumModel <- "factor1 =~ v1 + v2 + v3 + v4 + v5\nvar(factor1,p) = 1"
myStrumModel <- createStrumModel(
formulas = myStrumModel,
defaultError = '<p,e>',
fixLoadingToOne = FALSE
)
myStrumData <- strum_data(data, type = "Pedigree", twin = "zyg")
strum_result <- strum(myStrumModel, myStrumData)
var_list <- cv_individual(list(list(data = myStrumData, model = myStrumModel)))
var_poly <- var_list[[1]]$V[[1]]
var_env <- var_list[[1]]$V[[2]]
cov2cor(var_poly)
cov2cor(var_env)
strum_result
myStrumModel <- "factor1 =~ v1 + v2 + v3 + v4 + v5\nvar(factor1,e) = 1"
myStrumModel <- createStrumModel(
formulas = myStrumModel,
defaultError = '<p,e>',
fixLoadingToOne = TRUE
)
myStrumData <- strum_data(data, type = "Pedigree", twin = "zyg")
strum_result <- strum(myStrumModel, myStrumData)
strum_result
myStrumModel <- "factor1 =~ v1 + v2 + v3 + v4 + v5\nvar(factor1,p) = 1"
myStrumModel <- createStrumModel(
formulas = myStrumModel,
defaultError = '<p,e>',
fixLoadingToOne = TRUE
)
myStrumData <- strum_data(data, type = "Pedigree", twin = "zyg")
strum_result <- strum(myStrumModel, myStrumData)
strum_result
myStrumModel <- "factor1 =~ v1 + v2 + v3 + v4 + v5"
myStrumModel <- createStrumModel(
formulas = myStrumModel,
defaultError = '<p,e>',
fixLoadingToOne = TRUE
)
myStrumData <- strum_data(data, type = "Pedigree", twin = "zyg")
strum_result <- strum(myStrumModel, myStrumData)
strum_result
sem_result <- sem(
model = model_sem,
S = cov2cor(var_poly),
N = ncol(var_poly)
)
summary(sem_result)
summary(
sem(
model = model_sem,
S = cov2cor(var_env),
N = ncol(var_env)
))
sem_result <- sem(
model = model_sem,
S = var_poly,
N = ncol(var_poly)
)
summary(sem_result)
summary(
sem(
model = model_sem,
S = var_env,
N = ncol(var_env)
))
myStrumModel
plot(myStrumModel)
36/13
13/36
(x * 0.25424 + 0.495) + (x * -0.00318 + 0.51593)
x <- 1
(x * 0.25424 + 0.495) + (x * -0.00318 + 0.51593)
x <- .5
(x * 0.25424 + 0.495) + (x * -0.00318 + 0.51593)
library(rosetta)
devtools::document()
library(rosetta)
devtools::document()
library(rosetta)
devtools::document()
library(rosetta)
devtools::document()
library(rosetta)
devtools::document()
library(rosetta)
devtools::document()
library(rosetta)
devtools::document()
test <- dat
test <- df_b
View(test)
test <- dat
test <- asu_50_50_0
library(matrixcalc)
library(Matrix)
library(MASS)
library(psych)
library(DoE.wrapper)
#===============================================================================
# Create correlation matrix with missing values
#===============================================================================
# Simulate data
## Create correlation matrix for three factor model with specified loadings
set.seed(47)
corMatrixTruth <- matrix(
c(.9,.8,.7,.6,.77,.66,.55,
rep(0,7),rep(0,7),rep(0,7),
.6,.7,.8,.9,.77,.66,.55,
rep(0,7),rep(0,7),rep(0,7),
.8,.9,.6,.7,.77,.66,.55),
ncol=3
)
View(corMatrixTruth)
phi = matrix(c(1,.2,.4,
.2,1,.3,
.4,.3,1), ncol=3)
threeFactors <- sim.structure(corMatrixTruth, phi)
## Simulation parameters
N <- 1000
sim_means <- c(rep(0, 21))
sim_matrix <- as.matrix(threeFactors$model)
View(sim_matrix)
## Simulate dataset called ds
ds <- data.frame(mvrnorm ((N*3), sim_means, sim_matrix))
cov2cor(cov(ds[1:21]))
## Split dataset into 3 smaller datasets.
split <- random_split(
data = ds,
n_splits = 3,
seed = 2
)
source('~/Dropbox/rosetta/brett/rosetta-utils.R')
library(matrixcalc)
library(Matrix)
library(MASS)
library(psych)
library(DoE.wrapper)
#===============================================================================
# Create correlation matrix with missing values
#===============================================================================
# Simulate data
## Create correlation matrix for three factor model with specified loadings
set.seed(47)
corMatrixTruth <- matrix(
c(.9,.8,.7,.6,.77,.66,.55,
rep(0,7),rep(0,7),rep(0,7),
.6,.7,.8,.9,.77,.66,.55,
rep(0,7),rep(0,7),rep(0,7),
.8,.9,.6,.7,.77,.66,.55),
ncol=3
)
phi = matrix(c(1,.2,.4,
.2,1,.3,
.4,.3,1), ncol=3)
threeFactors <- sim.structure(corMatrixTruth, phi)
## Simulation parameters
N <- 1000
sim_means <- c(rep(0, 21))
sim_matrix <- as.matrix(threeFactors$model)
## Simulate dataset called ds
ds <- data.frame(mvrnorm ((N*3), sim_means, sim_matrix))
cov2cor(cov(ds[1:21]))
## Split dataset into 3 smaller datasets.
split <- random_split(
data = ds,
n_splits = 3,
seed = 2
)
factor_list <- list(
factor1 = c("V1", "V2", "V3", "V4"),
factor2 = c("V5", "V6", "V7", "V8"),
factor3 = c("V9", "V10", "V11")
)
### First test of 3 splits
data1 <- split[[1]][, c("V1", "V4", "V6", "V7", "V9", "V10")]
names(data1)
data2 <- split[[2]][, c("V2", "V3", "V5", "V8", "V10", "V11")]
names(data2)
data3 <- split[[3]][, c("V1", "V4", "V5", "V8", "V9", "V10", "V11")]
names(data3)
data_list <- list(data1 = data1, data2 = data2, data3 = data3)
data <- rbind_all(rbind_all(data1, data2), data3)
data <- data[c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11")]
cov_mat <- cov(data, use = "pairwise.complete.obs")
cov_mat <- cov2cor(cov_mat)
### Second test of 3 splits
data1 <- split[[1]][, c("V1", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
names(data1)
data2 <- split[[2]][, c("V2", "V3", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
names(data2)
data3 <- split[[3]][, c("V1", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
names(data3)
data_list <- list(data1 = data1, data2 = data2, data3 = data3)
data <- rbind_all(rbind_all(data1, data2), data3)
data <- data[c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
cov_mat <- cov(data, use = "pairwise.complete.obs")
cov_mat <- cov2cor(cov_mat)
library(matrixcalc)
library(Matrix)
library(MASS)
library(psych)
library(DoE.wrapper)
#===============================================================================
# Create correlation matrix with missing values
#===============================================================================
# Simulate data
## Create correlation matrix for three factor model with specified loadings
set.seed(47)
corMatrixTruth <- matrix(
c(.9,.8,.7,.6,.77,.66,.55,
rep(0,7),rep(0,7),rep(0,7),
.6,.7,.8,.9,.77,.66,.55,
rep(0,7),rep(0,7),rep(0,7),
.8,.9,.6,.7,.77,.66,.55),
ncol=3
)
phi = matrix(c(1,.2,.4,
.2,1,.3,
.4,.3,1), ncol=3)
threeFactors <- sim.structure(corMatrixTruth, phi)
## Simulation parameters
N <- 1000
sim_means <- c(rep(0, 21))
sim_matrix <- as.matrix(threeFactors$model)
## Simulate dataset called ds
ds <- data.frame(mvrnorm ((N*3), sim_means, sim_matrix))
cov2cor(cov(ds[1:21]))
## Split dataset into 3 smaller datasets.
split <- random_split(
data = ds,
n_splits = 3,
seed = 2
)
factor_list <- list(
factor1 = c("V1", "V2", "V3", "V4"),
factor2 = c("V5", "V6", "V7", "V8"),
factor3 = c("V9", "V10", "V11")
)
### First test of 3 splits
data1 <- split[[1]][, c("V1", "V4", "V6", "V7", "V9", "V10")]
names(data1)
data2 <- split[[2]][, c("V2", "V3", "V5", "V8", "V10", "V11")]
names(data2)
data3 <- split[[3]][, c("V1", "V4", "V5", "V8", "V9", "V10", "V11")]
names(data3)
data_list <- list(data1 = data1, data2 = data2, data3 = data3)
data <- rbind_all(rbind_all(data1, data2), data3)
data <- data[c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11")]
cov_mat <- cov(data, use = "pairwise.complete.obs")
cor_mat <- cov2cor(cov_mat)
### Second test of 3 splits
data1 <- split[[1]][, c("V1", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
names(data1)
data2 <- split[[2]][, c("V2", "V3", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
names(data2)
data3 <- split[[3]][, c("V1", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
names(data3)
data_list <- list(data1 = data1, data2 = data2, data3 = data3)
data <- rbind_all(rbind_all(data1, data2), data3)
data <- data[c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21")]
cov_mat <- cov(data, use = "pairwise.complete.obs")
cor_mat <- cov2cor(cov_mat)
#===============================================================================
# Steves algorithm
#===============================================================================
# 1. Define function to calculate frobenius norm of difference matrix.
sm <- function (mat, par) {
# Store original correlation matrix and matrix that can be modified
mat_par <- mat
# Get the missing value locations from the upper triangle
mat_par[lower.tri(mat_par)] <- 0
index_na <- which(is.na(mat_par), arr.ind = TRUE)
# Restore modified matrix and assign values
mat_par <- mat
for (i in 1:nrow(index_na)) {
mat_par[index_na[i,1], index_na[i,2]] <- par[i]
mat_par[index_na[i,2], index_na[i,1]] <- par[i]
}
# Difference between original matrix and nearest positive definite chosen matrix
matt_diff <- mat - nearPD(mat_par, corr = TRUE)[["mat"]]
# Calculate Frobenius norm of difference matrix
frob_norm <- sum(matt_diff^2, na.rm = TRUE)^(1/2)
frob_norm
}
# initial values
n_initial <- length(which(is.na(cov_mat)))/2
par <- lhs.design(n_initial, nfactors = 1, default.levels = c(-1, 1))[[1]]
# 2. Find values which minimize the frobenius norm
val <- optim(
par = par,
mat = cov_mat,
fn = sm,
lower = -1,
upper = 1,
method = "L-BFGS-B"
)
val[["par"]]
# 3. Put the estimated values back in original matrix
#    There should be a better way...
mat_optim <- cov_mat
mat_optim[lower.tri(mat_optim)] <- 0
index_na <- which(is.na(mat_optim), arr.ind = TRUE)
mat_optim <- cov_mat
for (i in 1:nrow(index_na)) {
mat_optim[index_na[i,1], index_na[i,2]] <- val[["par"]][i]
mat_optim[index_na[i,2], index_na[i,1]] <- val[["par"]][i]
}
is.positive.definite(mat_optim)
mat_optim
#===============================================================================
# Check standard deviation of estimates given different initial values
# Using latin hypercube for initial values
#===============================================================================
val_list <- list()
# takes a minute to run.
n_runs <- 100
par_mat <- lhs.design(n_runs, nfactors = n_initial, default.levels = c(-1, 1))
for (i in 1:n_runs) {
val_list[[i]] <- optim(
par = par_mat[i, ],
mat = cov_mat,
fn = sm,
lower = -1,
upper = 1,
method = "L-BFGS-B"
)[["par"]]
}
val_mat <- matrix(unlist(val_list), ncol = n_initial, nrow = n_runs, byrow = TRUE)
# sd and mean for estimated missing values
apply(val_mat, 2, sd)
apply(val_mat, 2, mean)
pval <- rep(NA, 10000)
data <- rnorm(100)
t.test(data)
names(t.test(data))
t.test(data)$p.value
pval <- rep(NA, 10000)
for (i in 1:10000) {
data <- rnorm(100)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 10000)
for (i in 1:10000) {
data <- rnorm(100, 0, 0.25)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 10000)
for (i in 1:10000) {
data <- rnorm(100, 1, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 10000)
for (i in 1:10000) {
data <- rnorm(100, 0, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 10000)
for (i in 1:10000) {
data <- rnorm(1000, 0, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 10000)
for (i in 1:100000) {
data <- rnorm(1000, 0, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 100)
for (i in 1:100) {
data <- rnorm(1000, 0, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 100)
for (i in 1:100) {
data <- rnorm(10000, 0, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
pval <- rep(NA, 100)
for (i in 1:100) {
data <- rnorm(100, 0, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
setwd("~/Dropbox/GCTA_2/brett/cluster/power2-results")
data <- read.csv("data.csv", header = TRUE)
hist(data[data$h2 == 0, ]$pval)
data[data$h2 == 0, ]$pval < 0.5
mean(data[data$h2 == 0, ]$pval < 0.5)
mean(data[data$h2 == 0, ]$pval >= 0.5)
pval <- rep(NA, 100)
for (i in 1:100) {
data <- rnorm(100, 0, 1)
pval[i] <- t.test(data)$p.value
}
hist(pval)
data <- read.csv("data.csv", header = TRUE)
hist(data[data$h2 == 0, ]$pval)
mean(data[data$h2 == 0, ]$pval >= 0.5)
data()
df_b
dat
asu_60_50_25
source("teds-prep.r")
setwd("~/Dropbox/rosetta/brett/pilot1-teds")
source("teds-prep.r")
source("../rosetta-utils.R")
library(sem)
#===============================================================================
# SEM with Complete data
#===============================================================================
# Remove zyg variable and only use complete cases
df_b <- df_b[complete.cases(df_b), c(vars)]
df_r <- df_r[complete.cases(df_r), c(vars)]
df_1 <- df_1[complete.cases(df_1), c(vars)]
df_2 <- df_2[complete.cases(df_2), c(vars)]
# SEM RAM Model
model <- sem_model(factor_list)
# both twins
sem_b <- sem::sem(model, data = df_b)
fscores_b <- sem::fscores(sem_b, data = df_b)
# random twin
sem_r <- sem::sem(model, data = df_r)
fscores_r <- sem::fscores(sem_r, data = df_r)
# twin 1
sem_1 <- sem::sem(model, data = df_1)
fscores_1 <- sem::fscores(sem_1, data = df_1)
# twin 2
sem_2 <- sem::sem(model, data = df_2)
fscores_2 <- sem::fscores(sem_2, data = df_2)
library(sem)
#===============================================================================
# SEM with Complete data
#===============================================================================
# Remove zyg variable and only use complete cases
df_b <- df_b[complete.cases(df_b), c(vars)]
df_r <- df_r[complete.cases(df_r), c(vars)]
df_1 <- df_1[complete.cases(df_1), c(vars)]
df_2 <- df_2[complete.cases(df_2), c(vars)]
# SEM RAM Model
model <- sem_model(factor_list)
# both twins
sem_b <- sem::sem(model, data = df_b)
fscores_b <- sem::fscores(sem_b, data = df_b)
# random twin
sem_r <- sem::sem(model, data = df_r)
fscores_r <- sem::fscores(sem_r, data = df_r)
# twin 1
sem_1 <- sem::sem(model, data = df_1)
fscores_1 <- sem::fscores(sem_1, data = df_1)
# twin 2
sem_2 <- sem::sem(model, data = df_2)
fscores_2 <- sem::fscores(sem_2, data = df_2)
df_store <- list(
df_b = df_b,
df_r = df_r,
df_1 = df_1,
df_2 = df_2
)
fscore_store <- list(
fscores_b = fscores_b,
fscores_r = fscores_r,
fscores_1 = fscores_1,
fscores_2 = fscores_2
)
200/12
34*12
