{
    "collab_server" : "",
    "contents" : "---\ntitle: \"comparisons\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nknitr::opts_chunk$set(cache=TRUE)\n```\n\n```{r include = FALSE}\nsource(\"teds-prep.r\")\nsource(\"../rosetta-utils.R\")\n```\n\n## Factor Scores from Original Complete Cases Data vs. Factor Scores from Rosetta\n\nFactor scores were calculated from an SEM on `complete.cases()` of TEDS data. Then structural missingness was added in order to calculate factor scores using Rosetta. This was done on the following sets of data: Both twins, Random twin, Twin 1, and Twin 2.\n\nCorrelation averages and standard deviations are based on 30 runs. The plots are built on the data from the last run.\n\n```{r include = FALSE}\nlibrary(sem)\n#===============================================================================\n# SEM with Complete data\n#===============================================================================\n# Remove zyg variable and only use complete cases\ndf_b <- df_b[complete.cases(df_b), c(vars)]\ndf_r <- df_r[complete.cases(df_r), c(vars)]\ndf_1 <- df_1[complete.cases(df_1), c(vars)]\ndf_2 <- df_2[complete.cases(df_2), c(vars)]\n\n# SEM RAM Model\nmodel <- sem_model(factor_list)\n\n# both twins\nsem_b <- sem::sem(model, data = df_b)\nfscores_b <- sem::fscores(sem_b, data = df_b)\n\n# random twin\nsem_r <- sem::sem(model, data = df_r)\nfscores_r <- sem::fscores(sem_r, data = df_r)\n\n# twin 1\nsem_1 <- sem::sem(model, data = df_1)\nfscores_1 <- sem::fscores(sem_1, data = df_1)\n\n# twin 2\nsem_2 <- sem::sem(model, data = df_2)\nfscores_2 <- sem::fscores(sem_2, data = df_2)\n```\n\n```{r include = FALSE}\n#===============================================================================\n# Run Rosetta for both, rand, 1, and 2\n# Store correlations and plots for comparison\n#===============================================================================\ndf_store <- list(\n  df_b = df_b,\n  df_r = df_r,\n  df_1 = df_1,\n  df_2 = df_2\n)\nfscore_store <- list(\n  fscores_b = fscores_b,\n  fscores_r = fscores_r,\n  fscores_1 = fscores_1,\n  fscores_2 = fscores_2\n)\nN <- 30\n\ncor_mean <- list()\ncor_sd <- list()\n\ngg_store <- list()\n\nfor (i in 1:length(df_store)) {\n\n  fscores_cor1 <- list()\n  fscores_cor2 <- list()\n  fscores_cor3 <- list()\n  \n  for (j in 1:N) {\n    # Split data and drop variables\n    teds_split <- complete2split(\n      data = df_store[[i]], \n      factor_list = factor_list,\n      n_splits = 3,\n      seed = j\n    )\n    \n    ## Complete data with missing\n    complete_missing <- teds_split[[1]]\n    \n    ## Split data\n    split <- teds_split[[2]]\n    \n    # Rosetta\n    \n    ## SEM on complete missing data\n    cov_cm <- popCov(complete_missing)\n    sem_cm <- sem::sem(model, cov_cm, ncol(cov_cm))\n    if (sem_cm$coeff[23] > 0.95) {\n      sem_cm$coeff[23] <- 0.92\n    }\n    f_est_cm <- fac_cov_estimates(sem_cm)\n    \n    ## Constrained SEM on split missing data\n    factor_list_s_1 <- list(\n      language = factor_list[[1]][factor_list[[1]] %in% colnames(split[[1]])], \n      readComp = factor_list[[2]][factor_list[[2]] %in% colnames(split[[1]])], \n      readWord = factor_list[[3]][factor_list[[3]] %in% colnames(split[[1]])]\n    )\n    factor_list_s_2 <- list(\n      language = factor_list[[1]][factor_list[[1]] %in% colnames(split[[2]])], \n      readComp = factor_list[[2]][factor_list[[2]] %in% colnames(split[[2]])], \n      readWord = factor_list[[3]][factor_list[[3]] %in% colnames(split[[2]])]\n    )\n    factor_list_s_3 <- list(\n      language = factor_list[[1]][factor_list[[1]] %in% colnames(split[[3]])],  \n      readComp = factor_list[[2]][factor_list[[2]] %in% colnames(split[[3]])], \n      readWord = factor_list[[3]][factor_list[[3]] %in% colnames(split[[3]])]\n    )\n    \n    model_s_1 <- sem_model(factor_list_s_1, sem_cm)\n    model_s_2 <- sem_model(factor_list_s_2, sem_cm)\n    model_s_3 <- sem_model(factor_list_s_3, sem_cm)\n    \n    sem_s_1 <- sem::sem(model_s_1, data = split[[1]])\n    sem_s_2 <- sem::sem(model_s_2, data = split[[2]])\n    sem_s_3 <- sem::sem(model_s_3, data = split[[3]])\n    \n    fscores_s_1 <- sem::fscores(sem_s_1, data = split[[1]])\n    fscores_s_2 <- sem::fscores(sem_s_2, data = split[[2]])\n    fscores_s_3 <- sem::fscores(sem_s_3, data = split[[3]])\n    \n    # Compare factor scores for complete data vs. Rosetta split data\n    \n    ## merge them for comparison\n    merged_1 <- merge(fscore_store[[i]], fscores_s_1, by = \"row.names\", all.x = FALSE)\n    merged_2 <- merge(fscore_store[[i]], fscores_s_2, by = \"row.names\", all.x = FALSE)\n    merged_3 <- merge(fscore_store[[i]], fscores_s_3, by = \"row.names\", all.x = FALSE)\n    \n    ## Create correlations between them\n    fscores_cor_1 <- cor(merged_1[2:4],merged_1[5:7])\n    fscores_cor_2 <- cor(merged_2[2:4],merged_2[5:7])\n    fscores_cor_3 <- cor(merged_3[2:4],merged_3[5:7])\n    \n    fscores_cor1[[j]] <- fscores_cor_1\n    fscores_cor2[[j]] <- fscores_cor_2\n    fscores_cor3[[j]] <- fscores_cor_3\n  }\n  \n  cor_mean[[i]] <- apply(\n    simplify2array(\n      c(fscores_cor1, fscores_cor2, fscores_cor3)\n    ), \n    c(1,2), \n    mean\n  )\n  \n  cor_sd[[i]] <- apply(\n    simplify2array(\n      c(fscores_cor1, fscores_cor2, fscores_cor3)\n    ), \n    c(1,2), \n    sd\n  )\n\n  gg_store[[i]] <- ggplot() + \n    geom_point(data = merged_1, aes(x = readWord.x, y = readWord.y), color=\"grey20\") +\n    geom_point(data = merged_1, aes(x = language.x, y = language.y), color=\"grey20\") +\n    geom_point(data = merged_1, aes(x = readComp.x, y = readComp.y), color=\"grey20\") +\n    geom_point(data = merged_2, aes(x = readWord.x, y = readWord.y), color=\"grey20\") +\n    geom_point(data = merged_2, aes(x = language.x, y = language.y), color=\"grey20\") +\n    geom_point(data = merged_2, aes(x = readComp.x, y = readComp.y), color=\"grey20\") +\n    geom_point(data = merged_3, aes(x = readWord.x, y = readWord.y), color=\"grey20\") +\n    geom_point(data = merged_3, aes(x = language.x, y = language.y), color=\"grey20\") +\n    geom_point(data = merged_3, aes(x = readComp.x, y = readComp.y), color=\"grey20\") + \n    geom_abline(aes(intercept=0, slope=1)) +\n    ylab(\"Constrained SEM factor scores from split missing data\") +\n    xlab(\"SEM factor scores from complete data\")\n}\n```\n\n### Both twins complete data factor scores vs. both twins Rosetta factor scores\n```{r}\n# Both\ngg_store[[1]]\n# Mean correlations\ncor_mean[[1]]\n# sd of correlations\ncor_sd[[1]]\n```\n\n### Random twins complete data factor scores vs. random twins Rosetta factor scores\n```{r}\n# Random\ngg_store[[2]]\n# Mean correlations\ncor_mean[[2]]\n# sd of correlations\ncor_sd[[2]]\n```\n\n### Twin 1 complete data factor scores vs. twin 1 Rosetta factor scores\n```{r}\n# Twin 1\ngg_store[[3]]\n# Mean correlations\ncor_mean[[3]]\n# sd of correlations\ncor_sd[[3]]\n```\n\n### Twin 2 complete data factor scores vs. twin 2 Rosetta factor scores\n```{r}\n# Twin 2\ngg_store[[4]]\n# Mean correlations\ncor_mean[[4]]\n# sd of correlations\ncor_sd[[4]]\n```\n\n## Factor Scores from Original Phenix Imputed Complete Data vs. Factor Scores from Rosetta\n\nData were reduced to only rows that had at least 3 observed measures on the variables. Phenix was then used to impute the remaining missing values. This was done on the following sets of data: Both twins, Random twin, Twin 1, and Twin 2.\n\nCorrelation averages and standard deviations are based on 30 runs. The plots are built on the data from the last run.\n\n```{r include = FALSE}\n#===============================================================================\n# Prep Data\n#===============================================================================\nsource(\"teds-prep.r\")\n# Remove rows/twin pairs in dataframe with 3 or less non-missing values per row/twin pair\ndf_b <- remove_missing(df_b, n_non_NA = 8, group_by = \"family\")\ndf_r <- remove_missing(df_r, n_non_NA = 3)\ndf_1 <- remove_missing(df_1, n_non_NA = 3)\ndf_2 <- remove_missing(df_2, n_non_NA = 3)\n\n# Calculate Kinship Matrix\nkin_df_b <- twin_kin(nrow(df_b), fam_size = 2, type = df_b$zyg, dz_id = 2)\nkin_df_r <- twin_kin(nrow(df_r), fam_size = 1)\nkin_df_1 <- twin_kin(nrow(df_1), fam_size = 1)\nkin_df_2 <- twin_kin(nrow(df_2), fam_size = 1)\n\n# Run phenix imputation\ndf_b_phenix <- phenix(Y = as.matrix(df_b[6:16]), K = kin_df_b, test = TRUE)\ndf_b <- as.data.frame(df_b_phenix[[1]])\ndf_r_phenix <- phenix(Y = as.matrix(df_r), K = kin_df_r, test = TRUE)\ndf_r <- as.data.frame(df_r_phenix[[1]])\ndf_1_phenix <- phenix(Y = as.matrix(df_1), K = kin_df_1, test = TRUE)\ndf_1 <- as.data.frame(df_1_phenix[[1]])\ndf_2_phenix <- phenix(Y = as.matrix(df_2), K = kin_df_2, test = TRUE)\ndf_2 <- as.data.frame(df_2_phenix[[1]])\n\n#===============================================================================\n# SEM with Complete data\n#===============================================================================\nmodel <- sem_model(factor_list)\n\n# both twins\nsem_b <- sem::sem(model, data = df_b)\nfscores_b <- sem::fscores(sem_b, data = df_b)\n\n# random twin\nsem_r <- sem::sem(model, data = df_r)\nfscores_r <- sem::fscores(sem_r, data = df_r)\n\n# twin 1\nsem_1 <- sem::sem(model, data = df_1)\nfscores_1 <- sem::fscores(sem_1, data = df_1)\n\n# twin 2\nsem_2 <- sem::sem(model, data = df_2)\nfscores_2 <- sem::fscores(sem_2, data = df_2)\n```\n\n```{r include = FALSE}\n#===============================================================================\n# Run Rosetta for both, rand, 1, and 2\n# Store correlations and plots for comparison\n#===============================================================================\ndf_store <- list(\n  df_b = df_b,\n  df_r = df_r,\n  df_1 = df_1,\n  df_2 = df_2\n)\nfscore_store <- list(\n  fscores_b = fscores_b,\n  fscores_r = fscores_r,\n  fscores_1 = fscores_1,\n  fscores_2 = fscores_2\n)\nN <- 30\n\ncor_mean <- list()\ncor_sd <- list()\nlast_fscore <- list()\ngg_store <- list()\n\n\n# Store complete data with structural missingness\ndf_complete_missing <- list()\n\nfor (i in 1:length(df_store)) {\n  \n  fscores_cor1 <- list()\n  fscores_cor2 <- list()\n  fscores_cor3 <- list()\n  \n  for (j in 1:N) {\n    # Split data and drop variables\n    teds_split <- complete2split(\n      data = df_store[[i]], \n      factor_list = factor_list,\n      n_splits = 3,\n      seed = j\n    )\n    \n    ## Complete data with missing\n    complete_missing <- teds_split[[1]]\n    ## Store for use with imputation\n    df_complete_missing[[i]] <- teds_split[[1]]\n    \n    ## Split data\n    split <- teds_split[[2]]\n    \n    # Rosetta\n    \n    ## SEM on complete missing data\n    cov_cm <- popCov(complete_missing)\n    sem_cm <- sem::sem(model, cov_cm, ncol(cov_cm))\n    if (sem_cm$coeff[23] > 0.95) {\n      sem_cm$coeff[23] <- 0.92\n    }\n    f_est_cm <- fac_cov_estimates(sem_cm)\n    \n    ## Constrained SEM on split missing data\n    factor_list_s_1 <- list(\n      language = factor_list[[1]][factor_list[[1]] %in% colnames(split[[1]])], \n      readComp = factor_list[[2]][factor_list[[2]] %in% colnames(split[[1]])], \n      readWord = factor_list[[3]][factor_list[[3]] %in% colnames(split[[1]])]\n    )\n    factor_list_s_2 <- list(\n      language = factor_list[[1]][factor_list[[1]] %in% colnames(split[[2]])], \n      readComp = factor_list[[2]][factor_list[[2]] %in% colnames(split[[2]])], \n      readWord = factor_list[[3]][factor_list[[3]] %in% colnames(split[[2]])]\n    )\n    factor_list_s_3 <- list(\n      language = factor_list[[1]][factor_list[[1]] %in% colnames(split[[3]])],  \n      readComp = factor_list[[2]][factor_list[[2]] %in% colnames(split[[3]])], \n      readWord = factor_list[[3]][factor_list[[3]] %in% colnames(split[[3]])]\n    )\n    \n    model_s_1 <- sem_model(factor_list_s_1, sem_cm)\n    model_s_2 <- sem_model(factor_list_s_2, sem_cm)\n    model_s_3 <- sem_model(factor_list_s_3, sem_cm)\n    \n    sem_s_1 <- sem::sem(model_s_1, data = split[[1]])\n    sem_s_2 <- sem::sem(model_s_2, data = split[[2]])\n    sem_s_3 <- sem::sem(model_s_3, data = split[[3]])\n    \n    fscores_s_1 <- sem::fscores(sem_s_1, data = split[[1]])\n    fscores_s_2 <- sem::fscores(sem_s_2, data = split[[2]])\n    fscores_s_3 <- sem::fscores(sem_s_3, data = split[[3]])\n    \n    last_fscore[[i]] <- rbind(fscores_s_1, fscores_s_2, fscores_s_3)\n    \n    # Compare factor scores for complete data vs. Rosetta split data\n    \n    ## merge them for comparison\n    merged_1 <- merge(fscore_store[[i]], fscores_s_1, by = \"row.names\", all.x = FALSE)\n    merged_2 <- merge(fscore_store[[i]], fscores_s_2, by = \"row.names\", all.x = FALSE)\n    merged_3 <- merge(fscore_store[[i]], fscores_s_3, by = \"row.names\", all.x = FALSE)\n    \n    ## Create correlations between them\n    fscores_cor_1 <- cor(merged_1[2:4],merged_1[5:7])\n    fscores_cor_2 <- cor(merged_2[2:4],merged_2[5:7])\n    fscores_cor_3 <- cor(merged_3[2:4],merged_3[5:7])\n    \n    fscores_cor1[[j]] <- fscores_cor_1\n    fscores_cor2[[j]] <- fscores_cor_2\n    fscores_cor3[[j]] <- fscores_cor_3\n  }\n  \n  cor_mean[[i]] <- apply(simplify2array(c(fscores_cor1, fscores_cor2, fscores_cor3)), c(1,2), mean)\n  cor_sd[[i]] <- apply(simplify2array(c(fscores_cor1, fscores_cor2, fscores_cor3)), c(1,2), sd)\n  \n  gg_store[[i]] <- ggplot() + \n    theme_bw() +\n    theme(text=element_text(family = \"Arial\")) +\n    geom_point(data = merged_1, aes(x = readWord.x, y = readWord.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_1, aes(x = language.x, y = language.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_1, aes(x = readComp.x, y = readComp.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_2, aes(x = readWord.x, y = readWord.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_2, aes(x = language.x, y = language.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_2, aes(x = readComp.x, y = readComp.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_3, aes(x = readWord.x, y = readWord.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_3, aes(x = language.x, y = language.y), color=\"grey20\", size = .75) +\n    geom_point(data = merged_3, aes(x = readComp.x, y = readComp.y), color=\"grey20\", size = .75) + \n    geom_abline(aes(intercept=0, slope=1)) +\n    theme(\n      axis.text.x = element_text(size=10),\n      axis.text.y = element_text(size=10),\n      axis.title = element_text(size = 10)\n    ) +\n    ylab(\"Factor Scores \\\"Rosetta\\\"\") +\n    xlab(\"Factor Scores \\\"Complete Data\\\"\") +\n    scale_x_continuous(breaks = c(-2, 0, 2))\n    \n    ggsave(\n      paste0(\"plot\", i, \".pdf\"), \n      plot = last_plot(), \n      width = 2.5, \n      height = 2.5, \n      units = c(\"in\"),\n      device = cairo_pdf\n      )\n}\n\n```\n\n### Both twins complete data factor scores vs. both twins Rosetta factor scores\n```{r}\n# Both\ngg_store[[1]]\n# Mean correlations\ncor_mean[[1]]\n# sd of correlations\ncor_sd[[1]]\n```\n\n### Random twins complete data factor scores vs. random twins Rosetta factor scores\n```{r}\n# Random\ngg_store[[2]]\n# Mean correlations\ncor_mean[[2]]\n# sd of correlations\ncor_sd[[2]]\n```\n\n### Twin 1 complete data factor scores vs. twin 1 Rosetta factor scores\n```{r}\n# Twin 1\ngg_store[[3]]\n# Mean correlations\ncor_mean[[3]]\n# sd of correlations\ncor_sd[[3]]\n```\n\n### Twin 2 complete data factor scores vs. twin 2 Rosetta factor scores\n```{r}\n# Twin 2\ngg_store[[4]]\n# Mean correlations\ncor_mean[[4]]\n# sd of correlations\ncor_sd[[4]]\n```\n\n\n## Factor Scores from Original Phenix Imputed Complete Data vs. Factor Scores from Structurally Missing Phenix Imputed Data\n\nBecause of the long run times, the correlations are based on a single run. (a single instance of a randomly created structurally missing dataset)\n\n```{r include = FALSE}\n#===============================================================================\n# Imputed results with phenix\n#===============================================================================\ndf_b_phenix_2 <- phenix(as.matrix(df_complete_missing[[1]]), K = kin_df_b, test = TRUE)\ndf_b_phnx <- as.data.frame(df_b_phenix_2[[1]])\ndf_r_phenix_2 <- phenix(as.matrix(df_complete_missing[[2]]), K = kin_df_r, test = TRUE)\ndf_r_phnx <- as.data.frame(df_r_phenix_2[[1]])\ndf_1_phenix_2 <- phenix(as.matrix(df_complete_missing[[3]]), K = kin_df_1, test = TRUE)\ndf_1_phnx <- as.data.frame(df_1_phenix_2[[1]])\ndf_2_phenix_2 <- phenix(as.matrix(df_complete_missing[[4]]), K = kin_df_2, test = TRUE)\ndf_2_phnx <- as.data.frame(df_2_phenix_2[[1]])\n\n# both twins\nsem_b_phnx <- sem::sem(model, data = df_b_phnx)\nfscores_b_phnx <- sem::fscores(sem_b_phnx, data = df_b_phnx)\n\n# random twin\nsem_r_phnx <- sem::sem(model, data = df_r_phnx)\nfscores_r_phnx <- sem::fscores(sem_r_phnx, data = df_r_phnx)\n\n# twin 1\nsem_1_phnx <- sem::sem(model, data = df_1_phnx)\nfscores_1_phnx <- sem::fscores(sem_1_phnx, data = df_1_phnx)\n\n# twin 2\nsem_2_phnx <- sem::sem(model, data = df_2_phnx)\nfscores_2_phnx <- sem::fscores(sem_2_phnx, data = df_2_phnx)\n\n\n## merge them for comparison\nmerged_1 <- merge(fscore_store[[1]], fscores_b_phnx, by = \"row.names\", all.x = FALSE)\nmerged_2 <- merge(fscore_store[[2]], fscores_r_phnx, by = \"row.names\", all.x = FALSE)\nmerged_3 <- merge(fscore_store[[3]], fscores_1_phnx, by = \"row.names\", all.x = FALSE)\nmerged_4 <- merge(fscore_store[[4]], fscores_2_phnx, by = \"row.names\", all.x = FALSE)\n\n## Create correlations between them\nfscores_cor_1 <- cor(merged_1[2:4],merged_1[5:7])\nfscores_cor_2 <- cor(merged_2[2:4],merged_2[5:7])\nfscores_cor_3 <- cor(merged_3[2:4],merged_3[5:7])\nfscores_cor_4 <- cor(merged_4[2:4],merged_4[5:7])\n\ngg_1 <- ggplot() + \n  geom_point(data = merged_1, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_1, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_1, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix imputed data\") +\n  xlab(\"SEM factor scores from complete data\")\n\ngg_2 <- ggplot() + \n  geom_point(data = merged_2, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_2, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_2, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix imputed data\") +\n  xlab(\"SEM factor scores from complete data\")\n\ngg_3 <- ggplot() + \n  geom_point(data = merged_3, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_3, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_3, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix imputed data\") +\n  xlab(\"SEM factor scores from complete data\")\n\ngg_4 <- ggplot() + \n  geom_point(data = merged_4, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_4, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_4, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix imputed data\") +\n  xlab(\"SEM factor scores from complete data\")\n```\n\n### Both twins complete imputed vs. phenix structurally imputed\n```{r}\n# Both\ngg_1\n# correlations\nfscores_cor_1\n```\n\n### Random twins complete imputed vs. phenix structurally imputed\n```{r}\n# Twins\ngg_2\n# correlations\nfscores_cor_2\n```\n\n### Twin 1 complete imputed vs. phenix structurally imputed\n```{r}\n# Twin 1\ngg_3\n# correlations\nfscores_cor_3\n```\n\n### Twin 2 complete imputed vs. phenix structurally imputed\n```{r}\n# Twin 2\ngg_4\n# correlations\nfscores_cor_4\n```\n\n## Factor Scores from Rosetta vs. Factor Scores from Structurally Missing Phenix Imputed Data\n\n```{r include = FALSE}\n## merge them for comparison\nmerged_rp1 <- merge(last_fscore[[1]], fscores_b_phnx, by = \"row.names\", all.x = FALSE)\nmerged_rp2 <- merge(last_fscore[[2]], fscores_r_phnx, by = \"row.names\", all.x = FALSE)\nmerged_rp3 <- merge(last_fscore[[3]], fscores_1_phnx, by = \"row.names\", all.x = FALSE)\nmerged_rp4 <- merge(last_fscore[[4]], fscores_2_phnx, by = \"row.names\", all.x = FALSE)\n\n## Create correlations between them\nfscores_cor_rp1 <- cor(merged_rp1[2:4],merged_rp1[5:7])\nfscores_cor_rp2 <- cor(merged_rp2[2:4],merged_rp2[5:7])\nfscores_cor_rp3 <- cor(merged_rp3[2:4],merged_rp3[5:7])\nfscores_cor_rp4 <- cor(merged_rp4[2:4],merged_rp4[5:7])\n\ngg_rp1 <- ggplot() + \n  geom_point(data = merged_1, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_1, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_1, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix\") +\n  xlab(\"SEM factor scores from Rosetta\")\n\ngg_rp2 <- ggplot() + \n  geom_point(data = merged_2, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_2, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_2, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix\") +\n  xlab(\"SEM factor scores from Rosetta\")\n\ngg_rp3 <- ggplot() + \n  geom_point(data = merged_3, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_3, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_3, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix\") +\n  xlab(\"SEM factor scores from Rosetta\")\n\ngg_rp4 <- ggplot() + \n  geom_point(data = merged_4, aes(x = readWord.x, y = readWord.y), color=\"green\") +\n  geom_point(data = merged_4, aes(x = language.x, y = language.y), color=\"red\") +\n  geom_point(data = merged_4, aes(x = readComp.x, y = readComp.y), color=\"blue\") +\n  geom_abline(aes(intercept=0, slope=1)) +\n  ylab(\"SEM factor scores from phenix\") +\n  xlab(\"SEM factor scores from Rosetta\")\n```\n\n### Both twins Rosetta vs. phenix structurally imputed\n```{r}\n# Both\ngg_rp1\n# correlations\nfscores_cor_rp1\n```\n\n### Random twins Rosetta vs. phenix structurally imputed\n```{r}\n# Twins\ngg_rp2\n# correlations\nfscores_cor_rp2\n```\n\n### Twin 1 Rosetta vs. phenix structurally imputed\n```{r}\n# Twin 1\ngg_rp3\n# correlations\nfscores_cor_rp3\n```\n\n### Twin 2 Rosetta vs. phenix structurally imputed\n```{r}\n# Twin 2\ngg_rp4\n# correlations\nfscores_cor_rp4\n```\n",
    "created" : 1465826810754.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1822709888",
    "id" : "3079BC66",
    "lastKnownWriteTime" : 1464016737,
    "last_content_update" : 1464016737,
    "path" : "~/Dropbox/rosetta/brett/pilot1-teds/comparisons2.Rmd",
    "project_path" : null,
    "properties" : {
        "chunk_rendered_width" : "611"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}