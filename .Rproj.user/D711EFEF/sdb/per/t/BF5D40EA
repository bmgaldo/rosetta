{
    "collab_server" : "",
    "contents" : "#' Rosetta Data\n#'\n#' Creates a named list of strum dataframes and strum models for each combination of supplied datasets.\n#'\n#' @param data_list A list of dataframes that contain a varying number of measured variables in respect to the underlying factor structure.\n#' @param factor_structure A named list for the hypothesized factor structure. Set the factor names as the list names and measured variables as the list elements.\n#' @param twin The name of the twin zygotic variable as a character string.\n#'\n#' @return Returns named list of strum dataframes and strum models for each combination of supplied datasets.\n#'\n#' @export\n#'\n#' @examples\n#' #----------------------------------------------------------------------------\n#' # Rosetta example\n#' #----------------------------------------------------------------------------\n#' rosetta_data()\n\nrosetta_data <- function(data_list, factor_structure, twin = NULL) {\n  n_df <- length(data_list)\n\n  ## List of indices for combinations of dataframes\n  comb_index <- 1:n_df\n  combs <- lapply(comb_index, function(z) {combn(length(comb_index), z)})\n\n  ## create list store for dataframes and Models\n  list_store <- list()\n  list_store_index <- 1\n\n  ### Create strum data and model for each individual dataframe\n  for (i in 1:n_df) {\n    ## Dataframes\n    list_item <- list(data =\n                        strum_data(\n                          data_list[[i]],\n                          type = \"Pedigree\",\n                          twin = twin\n                        )\n    )\n\n    ## Models\n    factors <- lapply(factor_structure, function(z) {intersect(z, names(data_list[[i]]))}) # Remove unused variables from factor structure\n    factors <- Filter(length, factors) # Remove all empty elements in list\n    model_text <- strum_model(factors)\n    list_item[[\"model\"]] <- createStrumModel(\n      formulas = model_text,\n      fixLoadingToOne = FALSE,\n      defaultError = '<e,p>'\n    )\n    list_store[[i]] <- list_item\n    names(list_store)[list_store_index] <- paste(i)\n    list_store_index <- list_store_index + 1\n  }\n\n  if (length(combs) > 1) {\n    ### Create strum data and model for each combination of dataframes\n    #### Create list of names for merging the dataframes\n    col_names <- lapply(data_list, colnames)\n    merged_list_names <- list()\n    merged_list_names_index <- 1\n    for (i in 2:n_df) {\n      for (j in 1:ncol(combs[[i]])) {\n        merged_list_names[[merged_list_names_index]] <- Reduce(intersect, col_names[combs[[i]][, j]])\n        names(merged_list_names)[merged_list_names_index] <- paste(unlist(combs[[i]][, j]), collapse = \"_\") # method downsides? https://stat.ethz.ch/pipermail/r-help/2001-March/011480.html\n        merged_list_names_index <- merged_list_names_index + 1\n      }\n    }\n\n    #### Create merged dataframes and models\n    df_merged <- list()\n    df_merged_index <- 1\n    for (i in 2:n_df) {\n      for (j in 1:ncol(combs[[i]])) {\n        ## Dataframes\n        df_list_combn <- data_list[combs[[i]][, j]]\n        df_list_combn <- lapply(df_list_combn, function(z) {\n          z[, names(z) %in% merged_list_names[[df_merged_index]]]\n        })\n        df_list_combn_merged <- do.call(\"rbind\", df_list_combn)\n        list_item <- list(data =\n                            strum_data(\n                              df_list_combn_merged,\n                              type = \"Pedigree\",\n                              twin = twin\n                            )\n        )\n\n        ## Models\n        factors <- lapply(factor_structure, function(z) {intersect(z, names(df_list_combn_merged))})\n        factors <- Filter(length, factors) # Remove all empty elements in list\n        model_text <- strum_model(factors)\n\n        list_item[[\"model\"]] <- createStrumModel(\n          formulas = model_text,\n          fixLoadingToOne = FALSE,\n          defaultError = '<e,p>'\n        )\n        list_store[[list_store_index]] <- list_item\n        names(list_store)[list_store_index] <- names(merged_list_names)[df_merged_index]\n        list_store_index <- list_store_index + 1\n        df_merged_index <- df_merged_index + 1\n      }\n    }\n  }\n  list_store\n}\n",
    "created" : 1465822406326.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1624388942",
    "id" : "BF5D40EA",
    "lastKnownWriteTime" : 1460990085,
    "last_content_update" : 1460990085,
    "path" : "~/Dropbox/rosetta/brett/rosetta/R/rosetta_data.R",
    "project_path" : "R/rosetta_data.R",
    "properties" : {
        "chunk_rendered_width" : "650",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}