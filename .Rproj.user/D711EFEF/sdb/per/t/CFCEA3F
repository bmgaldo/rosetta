{
    "collab_server" : "",
    "contents" : "#' sem_model\n#'\n#' Create a RAM specified Structural Equation Model for the 'sem' package.\n#'\n#' @param factor_structure A named list for the hypothesized factor structure. Set the factor names as the list names and measured variables as the list elements.\n#' @param sem_object An sem object for the purposes of creating an sem model with fixed covariance values based on sem_object.\n#'\n#' @return Returns an object of class semmod.\n#'\n#' @importFrom sem specifyModel\n#' @export\n#'\n#' @examples\n#' #----------------------------------------------------------------------------\n#' # Rosetta example\n#' #----------------------------------------------------------------------------\n#' sem_model()\n\nsem_model <- function(factor_structure, sem_object = NULL) {\n  # Character values and inputs for SEM model\n  vars <- stack(factor_structure)[[\"values\"]]\n  factors <- as.character(stack(factor_structure)[[\"ind\"]])\n  unique_factors <- unique(factors)\n  n_factors <- length(factor_structure)\n  n_vars <- length(vars)\n  coefs <- paste(\"lam_\", vars, sep = \"\")\n  var_params <- paste(\"e_\", vars, sep = \"\")\n  fac_diag_values <- rep(1, n_factors)\n  if (n_factors > 1) {\n    factor_combs <- combn(unique_factors, 2) # Choose-2 combinations for factors\n  } else {\n    factor_combs <- matrix(unique_factors)\n  }\n  n_combs <- ncol(factor_combs)\n  fac_cor_params <- character(n_combs) # Initialize empty vector\n  for (i in 1:n_combs) {\n    fac_cor_params[i] <- paste(\"f_\", paste(factor_combs[,i], collapse = \"_\"), sep = \"\")\n  }\n  if(is.null(sem_object)) { # Set to NA for unconstrained model\n    fac_cor_values <- rep(NA, n_combs)\n  } else { # Set to estimated values for constrained model\n    if (n_factors > 1) {\n      fac_cor_values <- fac_cor_estimates(sem_object) # Store dataframe of factor covariance estimates\n      fac_cor_values <- fac_cor_values[match(fac_cor_params, fac_cor_values$covariance), ] # Make sure the covariance values are matched/ordered to the correct covariance\n      fac_cor_values <- na.omit(fac_cor_values) # Remove any factor covariances that are not need/matched\n      fac_cor_values <- fac_cor_values$estimate\n      fac_cor_params <- rep(NA, n_combs)\n    }\n  }\n\n  # Create a tidy dataset.\n  ## Columns\n  if (n_factors > 1) {\n    left <- c(factors, vars, unique_factors, factor_combs[1,])\n    right <- c(vars, vars, unique_factors, factor_combs[2,])\n    arrow <- c(rep(\"->\", n_vars), rep(\"<->\", n_vars), rep(\"<->\", n_factors), rep(\"<->\", n_combs))\n    param <- c(coefs, var_params, rep(NA, n_factors), fac_cor_params)\n    value <- c(rep(NA, n_vars), rep(NA, n_vars), fac_diag_values, fac_cor_values)\n  } else {\n    left <- c(factors, vars, unique_factors)\n    right <- c(vars, vars, unique_factors)\n    arrow <- c(rep(\"->\", n_vars), rep(\"<->\", n_vars), rep(\"<->\", n_factors))\n    param <- c(coefs, var_params, rep(NA, n_factors))\n    value <- c(rep(NA, n_vars), rep(NA, n_vars), fac_diag_values)\n  }\n\n  ## Dataframe\n  data <- data.frame(left = left, arrow = arrow, right = right, param = param,\n                     value = value, stringsAsFactors = FALSE)\n\n  # Create Empty character vector that will be filled. This avoids \"writing\" to disk.\n  if (n_factors > 1) {\n    text <- character(n_vars*2 + n_factors + n_combs)\n  } else {\n    text <- character(n_vars*2 + n_factors)\n  }\n  # Fill in character vector\n  for (i in 1:length(text)) { # Specify regression coefficients\n    text[i] <- paste(\n      paste(as.character(data[i,1:3]), collapse = \" \"),\n      paste(as.character(data[i,4:5]), collapse = \", \"),\n      sep = \", \"\n    )\n  }\n\n  # Return SEM model\n  model_text <- paste(text, collapse = \"\\n\")\n  specified_model <- specifyModel(text = model_text, quiet = TRUE)\n  specified_model\n}\n",
    "created" : 1465820992487.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1679171275",
    "id" : "CFCEA3F",
    "lastKnownWriteTime" : 1460991720,
    "last_content_update" : 1460991720,
    "path" : "~/Dropbox/rosetta/brett/rosetta/R/sem_model.R",
    "project_path" : "R/sem_model.R",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}